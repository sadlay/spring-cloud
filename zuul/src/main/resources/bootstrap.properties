# 服务端口
server.port=80
# spring应用名称
spring.application.name=zuul

#用户微服务映射规则
# 指定ANT风格的URL匹配
zuul.routes.user-service.path=/u/**
# 映射用户服务中心服务ID，zuul会自动使用服务端负载均衡
zuul.routes.user-service.service-id=user
#每次通过api gateway访问的时候，在下面应用中获取的sessionId每次都不一样。（同一个页面刷新访问
zuul.routes.user-service.sensitiveHeaders="*"

# 产品微服务映射规则
zuul.routes.product-service.path=/p/**
# 指定映射的服务产品地址，这样zuul就会将请求转发到产品的微服务上
#zuul.routes.product-service.url=http://localhost:9001/
zuul.routes.product-service.service-id=product
zuul.routes.product-service.sensitiveHeaders="*"

#重试，默认false
zuul.routes.user-service.retryable=true
#ribbo负载均衡策略配置，默认是依次轮询
#user-service.ribbon.NFLoadBalancerRuleClassName=com.netflix.loadbalancer.RandomRule


#在eureka界面显示IP
eureka.instance.prefer-ip-address=true
#在eureka中的instanceId
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:${server.port}
# 注册给服务治理中心
eureka.client.service-url.defaultZone=http://localhost:7001/eureka,http://localhost:7002/eureka

#开启健康检查(需要spring-boot-starter-actuator依赖)
eureka.client.healthcheck.enabled=true
#租期到期时间，默认90秒
eureka.instance.lease-expiration-duration-in-seconds=30
#租赁更新时间间隔，默认30，即30秒发送一次心跳
eureka.instance.lease-renewal-interval-in-seconds=10

#启动负载均衡的重试机制，默认false
spring.cloud.loadbalancer.retry.enabled=true
#Hystrix是否启用超时时间
hystrix.command.default.execution.timeout.enabled=true
#Hystrix断路器的超时时间，默认是1s，断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试。
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=2000

#ribbon请求连接的超时时间
ribbon.ConnectTimeout=250
#请求处理的超时时间
ribbon.ReadTimeout=1000
#对所有请求操作都进行重试
ribbon.OkToRetryOnAllOperations=true
#对当前服务的重试次数（第一次分配给9082的时候，如果404，则再重试MaxAutoRetries次，如果还是404，则切换到其他服务MaxAutoRetriesNextServer决定）
ribbon.MaxAutoRetries=0
#切换服务的次数(比如本次请求分配给9082处理，发现404，则切换分配给9081处理，如果还是404，则返回404给客户端）
ribbon.MaxAutoRetriesNextServer=1


# 设置等待时间，要大于断路器等待时间，不然会ReadTimeOut异常
zuul.host.connect-timeout-millis=10000
zuul.host.socket-timeout-millis=60000

# 配置文件名字和组别
spring.cloud.config.name=redis
spring.cloud.config.profile=dev
# 直接使用config server端
# spring.cloud.config.uri=http://localhost:7777
# 使用注册中心，多个configure-server保证高可用性
spring.cloud.config.discovery.enabled=true
spring.cloud.config.discovery.service-id=configure-server
spring.cloud.config.label=master

